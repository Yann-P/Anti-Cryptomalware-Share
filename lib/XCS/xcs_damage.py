from enum import Enum

class XCSDamage(object):

	def __init__(self, num_created=0, num_modified=0, num_deleted=0):
		self._num_created = num_created
		self._num_modified = num_modified
		self._num_deleted = num_deleted
		
	def __str__(self):
		return "[XCSDamage num_created=%d num_modified=%d num_deleted=%d]" % (self._num_created, self._num_modified, self._num_deleted)

	def __eq__(self, obj):
		if not isinstance(obj, XCSDamage):
        		return False
		return obj._num_created == self._num_created and obj._num_modified == self._num_modified and obj._num_deleted == self._num_deleted


	def __repr__(self):
		return str(self)

	def __add__(self, obj):
		if isinstance(obj, XCSDamage):
			self._num_created += obj._num_created
			self._num_modified += obj._num_modified
			self._num_deleted += obj._num_deleted
			return self

		elif isinstance(obj, XCSDamageType):
			if obj == XCSDamageType.c:
				self._num_created += 1
			elif obj == XCSDamageType.m:
				self._num_modified += 1
			elif obj == XCSDamageType.d:
				self._num_deleted += 1
		else:
			raise TypeError("You cannot add a XCSDamage object with another object type.")
		
		return self

class XCSDamageType(Enum):
	m = 'm' # file modification
	c = 'c' # file creation
	d = 'd' # file deletion

