#!/usr/bin/env python
import signal
import subprocess
from threading import Thread
import sys
import os

class SambaLog(object):
	
	def __init__(self, config):
		self._config = config
		self._paths_to_users = {} 	# { path1 => [user1, ... usern] }
		self._users_to_damage = {} 	# { user => XCSDamage }
		
		signal.signal(signal.SIGINT, self._interrupt_handler)

		self._watcher = subprocess.Popen("./test_emulate_samba.sh",
			#shell=True,
			stdout=subprocess.PIPE)
		
		self._thread = Thread(target=SambaLog._watch, args=(self._watcher,))		
		self._thread.start()

	@staticmethod
	def _watch(proc):
		
		for line in iter(proc.stdout.readline, b''):
			print line
		
	def _add(username, path):
		self._paths_to_users[path] = username

	def _who(path):
		return self._path_to_users[path]

	def report():
		return self._users_to_damage[username]
		
	def clear(username):
		del self.users_to_damage[username]
		for path, user in self._paths_to_users:
			if user == username:
				del self._paths_to_users[path]

	def _interrupt_handler(self, signum, frame):
		print "noooooo i dont want to die"
		
		self._watcher.terminate()
		self._thread.join()
		print "thread joined"


# tests
if __name__ == '__main__':
	sl = SambaLog(None)
