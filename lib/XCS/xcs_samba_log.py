#!/usr/bin/env python3.4
import signal
import subprocess
from threading import Thread
import sys
import os
from xcs_damage import XCSDamage, XCSDamageType

class XCSSambaLog(object):
	
	def __init__(self, samba_log_parser_path, samba_log_path):
		self._info_by_filename = {} 	# { path1 => [(user1, op1), ..., (usern, opn)] }
		self._users_to_damage = {} 	# { user => XCSDamage }
		self._watcher = subprocess.Popen(["/bin/bash", os.path.abspath(samba_log_parser_path), samba_log_path], stdout=subprocess.PIPE, preexec_fn=os.setsid)
		self._thread = Thread(target=self._watch)
		self._thread.start()
		signal.signal(signal.SIGINT, self._interrupt_handler)
		#todo figure out what is blocking

	def _watch(self):
		for line in iter(self._watcher.stdout.readline, b''):
    			print(">>> " + line.rstrip())
		#for line in self._watcher.stdout:
			#line = line.decode('utf-8')
			#print(line)
			#	line = line.split()
			#	self._add(username=line[0], damage_type=line[1], path=line[2])
		print("nothing to read from parser.")
	
	def _add(self, username, damage_type, path):
		damage_type = XCSDamageType(damage_type)

		if not path in self._info_by_filename:
			self._info_by_filename[path] = []
		self._info_by_filename[path].append((username, damage_type))
		
		if username in self._users_to_damage:
			existing_damage = self._users_to_damage[username]
			print("username %s has already done damage before" % username)
			print(str(existing_damage))
			existing_damage += damage_type
		else:
			self._users_to_damage[username] = XCSDamage() + damage_type

		print("username " + username + " has now damage=" + str(self._users_to_damage[username]))

	def get_user_by_filename(self, path):
		return self._info_by_filename(path)[0]

	def get_report(self):
		return self._users_to_damage
		
	def clear(self, username):
		del self.users_to_damage[username]
		for path, user in self._info_by_filename:
			if user == username:
				del self._info_by_filename[path]

	def _interrupt_handler(self, signum, frame):
		print("XCSSambaLog: interrupt signal received")
		os.killpg(os.getpgid(self._watcher.pid), signal.SIGTERM)
		self._thread.join()
		print("XCSSambaLog thread joined")

class XCSSambaLogException(Exception):
	pass
