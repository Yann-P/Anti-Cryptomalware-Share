import sys
import logging

from threading import Thread
from response_actions.xcs_response_action import XCSResponseAction, XCSResponseActionException
from xcs_attack import XCSAttackStatus

class XCSResponse(Thread):

	def __init__(self, attack, notification_interval):
		Thread.__init__(self)
		self._attack = attack
		self._notification_interval = notification_interval
		self._actions = []

	def add_action(self, action_instance):
		if type(action_instance) != XCSResponseAction:
			self._actions.append(action_instance)
		else:
			logging.error("Trying to add action module that does not extend XCSResponseAction. Ignoring.")

	def _can_notify(self):
		return XCSAttackStatus.OVER == self._attack.status or self._attack.seconds_since_last_notification() > self._notification_interval

	def run(self):
		logging.warning('XCSResponse: Response thread started for attack %s with %d action modules'
			% (self._attack, len(self._actions)))

		can_notify_now = self._can_notify() # preventing flood.

		for action in self._actions:
			try:
				action.handle_attack(self._attack, can_notify_now)
				if can_notify_now:
					self._attack.reset_last_notification_time()
			except XCSResponseActionException as e:
				logging.error("XCSResponse: Action module failed to handle attack: " + str(e))

		logging.debug("response completed")
	
