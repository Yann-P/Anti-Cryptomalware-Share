import sys

from threading import Thread
from loggers.xcs_logger import XCSLoggerException
from notifiers.xcs_notifier import XCSNotifierException
from xcs_attack import XCSAttackStatus

class XCSResponse(Thread):

	def __init__(self, attack, attack_status, notification_interval):
		Thread.__init__(self)
		self._attack = attack
		self._notification_interval = notification_interval
		self._loggers_instances = []
		self._notifiers_instances = []
		self._attack_status = attack_status

	def add_logger(self, logger_instance):
		self._loggers_instances.append(logger_instance)

	def add_notifier(self, notifier_instance):
		self._notifiers_instances.append(notifier_instance)

	def _run_loggers(self):
		for logger in self._loggers_instances:
			try:
				logger.log(self._attack, self._attack_status)
			except XCSLoggerException as e:
				sys.stderr.write("XCSResponse: Logger error: " + str(e))

	def _run_notifiers(self):
		for notifier in self._notifiers_instances:
			try:
				notifier.notify(self._attack, self._attack_status)
			except XCSNotifierException as e:
				sys.stderr.write("XCSResponse: Notifier error: " + str(e))

	def _can_notify(self):
		return XCSAttackStatus.OVER == self._attack_status or self._attack.seconds_since_last_notification() > self._notification_interval

	def run(self):
		print('XCSResponse: Response thread started for attack #%s (status=%s) with %d loggers and %d notifiers'
			% (self._attack.id, self._attack_status, len(self._loggers_instances), len(self._notifiers_instances)))

		self._run_loggers()

		if self._can_notify():
			self._run_notifiers()
			self._attack.reset_last_notification_time()

		print("response completed")
	
