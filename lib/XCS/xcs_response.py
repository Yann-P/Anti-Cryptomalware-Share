import time

from threading import Thread
from xcs_syslogger import XCSSysLogger
from xcs_mail_helper import XCSMailHelper

class XCSResponse(Thread):

	def __init__(self, attack, config, verbose=False):
		Thread.__init__(self)
		self._config = config
		self._attack = attack
		self._notification_interval = int(config.get('NOTIFY_INTERVAL'))

	def run(self):
		print('XCSResponse: Response thread started for attack %d' % self._attack.id)

		if int(self._config.get('SYSLOG_ENABLED')) == 1:
			(XCSSysLogger()).log(str(self._attack))

		if self._attack.seconds_since_last_notification() > self._notification_interval:

			for recipient in self._config.get("NOTIFY_USERS").split():
				email_addr = "%s@%s" % (recipient, self._config.get("NOTIFY_DOMAIN"))
				print("XCSResponse: Sending mail to %s" % email_addr)
				XCSMailHelper.send_mail(email_addr, "xcs attack: (user=%s ip=%s host=%s)" % self._attack.username, self._attack.ip, self._attack.hostname, str(self._attack))

			self._attack.reset_last_notification_time()
		else:
			print("XCSResponse: can't notify so soon")

		return
