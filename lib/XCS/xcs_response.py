import time

from threading import Thread
from xcs_syslogger import XCSSysLogger
from xcs_mail_helper import XCSMailHelper

class XCSResponse(Thread):

    def __init__(self, attack, config, verbose=False):
        Thread.__init__(self, verbose=verbose)
        self._config = config
        self._attack = attack
        self._notification_interval = int(config.get('NOTIFY_INTERVAL'))


    def run(self):
        print 'response triggered for attack ' + str(self._attack)

        if self._config.get('SYSLOG_ENABLED') == 1:
            (XCSSysLogger()).log(self._attack)

        if self._attack.seconds_since_last_notification() > self._notification_interval:

            XCSMailHelper.send_mail("fsfsd@sdfsfd.com", "xcs_attack", "blah blah.") # todo send mail for each user

            self._attack.reset_last_notification_time()

        print 'response thread has terminated.'
        return
