import time
import os
import sys

from threading import Thread
from xcs_syslogger import XCSSysLogger
from xcs_mail_helper import XCSMailHelper

class XCSResponse(Thread):

	def __init__(self, attack, config, verbose=False):
		Thread.__init__(self)
		self.config = config
		self._attack = attack
		self._notification_interval = config.get('NOTIFY_INTERVAL')
	
	def _send_mail_notice(self, dtu_username, attack):
		
		email_addr = "%s@%s" % (dtu_username, self.config.get("NOTIFY_DOMAIN"))
		user_mail_path = os.path.join(self.config.prog_dir, '..', 'etc', self.config.get('NOTIFY_USER_EMAIL_BODY_FILE'))
		print(user_mail_path)
		
		print("XCSResponse: Sending mail to %s" % email_addr)
		
		if True or dtu_username == attack.username: # TODO CHANGE!!!!!
			with open(user_mail_path, 'r') as user_mail_file:
				email_subject = self.config.get('NOTIFY_USER_EMAIL_SUBJECT')
				email_body = user_mail_file.read() + "\n\nTechnical information: " + str(attack)
				XCSMailHelper.send_mail(email_addr, email_subject, email_body)
		else:
			email_subject = "xcs attack: (%s, %s, %s)" % (attack.username, attack.ip, attack.hostname)
			email_body = str(attack)
			XCSMailHelper.send_mail(email_addr, email_subject, email_body)
	
	def _perform_logging(self):	
		if self.config.get('SYSLOG_ENABLED') == 1:
			(XCSSysLogger()).log(str(self._attack))
	
	def _perform_notifications(self):	
		if not self._attack.seconds_since_last_notification() > self._notification_interval:
			return False

		if self.config.get('NOTIFY_EMAIL_ENABLED'):
			for dtu_username in self.config.get("NOTIFY_USERS").split():
				self._send_mail_notice(dtu_username, self._attack)

		self._attack.reset_last_notification_time()
		return True	

	def run(self):
		print('XCSResponse: Response thread started for attack #%d' % self._attack.id)
		self._perform_logging()
		self._perform_notifications()
		return
