import os
import sys
import hashlib
import subprocess

def git_status_hash(path):
	return hashlib.sha224(git_status(path)).hexdigest()

def get_file_owner(path, filename):
	os.chdir(path)
	try:
		owner = subprocess.check_output("stat -c '%U' " + filename)
	except subprocess.CalledProcessError as e:
		return False
	return owner

def is_git_repo(path):
	os.chdir(path)
	try:
		subprocess.check_call("test -d .git", shell=True)
	except subprocess.CalledProcessError as e:
		return False
	return True

def get_ip_addresses(username):
	try:
		res = subprocess.check_output("[ $EUID -eq 0 ] && smbstatus -bn -u " + username + " 2>/dev/null | awk 'p; /\-/ {p=1}' | awk '{print $4}'", shell=True)
	except subprocess.CalledProcessError as e:
		return None
	return res.splitlines() # to an array

# NOT IMPLEMENTED
def get_hostname(ip):
	return 'localhost'

def git_status(path):
	os.chdir(path)
	return subprocess.check_output('git status --porcelain', shell=True)

def get_owners_of_modified_files(path):
	os.chdir(path)
	try:
		return subprocess.check_output("git status --porcelain | awk '{print $2}' | xargs --no-run-if-empty stat -c '%U' | uniq", shell=True).splitlines()
	except subprocess.CalledProcessError as e:
		return False

def get_num_files_by_owner(owner, path):
	return int(subprocess.check_output("git status --porcelain | awk '{print $2}' | xargs --no-run-if-empty stat -c '%U' | grep " + owner + " | wc -l", shell=True))

def git_status_filenames_list(path):
	os.chdir(path)
	try:
		files = subprocess.check_output("git stauts --porcelain | awk '{print $2}'", shell=True)
	except subprocess.CalledProcessError as e:
		return False
	return files.splitlines()

def nb_files_changed(path):
	os.chdir(path)
	return int(subprocess.check_output('git status --porcelain | wc -l', shell=True))

def rollback(path):
	os.chdir(path)
	full_path = os.path.join(os.path.basename(sys.argv[0]), path)

	print "share path is " + full_path

	if not is_git_repo(path):
		sys.stderr.write("error: not a git repository.")
		return 1

	if git_status(path) == "":
		sys.stderr.write("error: no changes to rollback.")
		return 1

	print "This command will ERASE all changes since the last commit in the repository specified in the conf file."
	print "Here are the modifications that will be erased:"
	print "---------------"
	os.system('git status --short')
	print "---------------"
	print "Are you sure you want to erase all changes in " + full_path + "? [y/N]"

	if not raw_input().lower() in {'yes', 'y'}:
		print "Abort."
		return 1
	else:
		os.system('git reset HEAD --hard')
		os.system('git clean -fd')

	return 0
