import os
import sys
import hashlib
import subprocess
import logging

def is_git_repo(path):
	os.chdir(path)
	try:
		subprocess.check_call("test -d .git", shell=True)
	except subprocess.CalledProcessError as e:
		return False
	return True

def get_ip_addresses(username):	
	res = subprocess.check_output("smbstatus -bn -u %s 2>/dev/null | tail -n 1 | awk '{print $4}' | uniq" % username, shell=True).decode('utf-8')
	return res.splitlines() # to an array

def get_hostname(ip):
	try:
		return subprocess.check_output("timeout 3 nmblookup -A %s | grep \<00\> | grep -v \<GROUP\> | awk '{print $1}'" % ip, timeout=3, shell=True).decode('utf-8')
	except (subprocess.TimeoutExpired, subprocess.CalledProcessError) as e:
		return ip

def git_status(path):
	os.chdir(path)
	return subprocess.check_output('git status --porcelain', shell=True).decode('utf-8')

def nb_files_changed(path):
	os.chdir(path)
	return int(subprocess.check_output('git status --porcelain | wc -l', shell=True).decode('utf-8'))

def rollback(path, ask_for_confirm=True):
	os.chdir(path)
	full_path = os.path.join(os.path.basename(sys.argv[0]), path)

	logging.debug("Share path is " + full_path)

	if not is_git_repo(path):
		logging.error("error: not a git repository.")
		return False

	if git_status(path) == "":
		logging.error("no changes to rollback.")
		return True

	if ask_for_confirm:
		print("This command will ERASE all changes since the last commit in the repository specified in the conf file.")
		print("Here are the modifications that will be erased:")
		print("---------------")
		os.system('git status --short')
		print("---------------")
		print("Are you sure you want to erase all changes in " + full_path + "? [y/N]")

	if ask_for_confirm and not input().lower() in {'yes', 'y'}:
		logging.warning("Abort.")
		return False
	else:
		try:
			print(subprocess.check_output('git reset HEAD --hard', shell=True).decode('utf-8'))
			print(subprocess.check_output('git clean -fd', shell=True).decode('utf-8'))
		except subprocess.CalledProcessError as e:
			logging.error("Unable to perform rollback: " + str(e) + "\n")
			return False

	logging.debug("Rollback OK.")
	return True
