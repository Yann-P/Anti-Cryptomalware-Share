import signal
import time
import os

from xcs_response import XCSResponse
from xcs_attack import XCSAttack
import xcs_share_helper

class XCSMonitor:

	def __init__(self, msg, args, config):
		self.msg 			= msg
		self._args 			= args
		self._config 			= config
		self._attacks 			= {}
		self._alarm_interval 		= int(config.get('MONITOR_FREQUENCY'))
		self._share_path 		= config.get('SHARE_PATH')
		self._response_threads 		= [] # do we need that??
#		self._last_git_hash		= xcs_share_helper.git_status_hash(self._share_path)
		self._setup_alarm()

		if xcs_share_helper.nb_files_changed(self._share_path) != 0:
			raise XCSMonitorException("you must revert the changes before starting the monitor.\nuse the rollback command.")

		if not xcs_share_helper.check_if_root():
			raise XCSMonitorException("xcs-monitor needs root. please restart with sudo.")			

		while True:
			time.sleep(100)

	def _invoke_response(self, attack):
		thread = XCSResponse(attack, self._config, self._args.verbose)
		self._response_threads.append(thread)
		thread.start()
 
	def _setup_alarm(self):
		signal.signal(signal.SIGALRM, self._alarm_handler)
		signal.alarm(self._alarm_interval)

	def _alarm_handler(self, signum, frame):
		modified_files_owners = xcs_share_helper.get_owners_of_modified_files(self._share_path)
		print "owners:", modified_files_owners

		for owner in modified_files_owners:

			num_files = xcs_share_helper.get_num_files_by_owner(self._share_path, owner)
			ip_addresses = xcs_share_helper.get_ip_addresses(owner)
			
			if len(ip_addresses) == 0:
				raise XCSMonitorException("IP address(es) for " + owner + " could not be retreived.")
				

			for ip in ip_addresses:
				hostname = xcs_share_helper.get_hostname(ip)

				primary_key = (owner, ip, hostname)

				if primary_key in self._attacks:

					print "existing attack!"
					ongoing_attack = self._attacks[primary_key]
					ongoing_attack.update_num_files(num_files)
					self._invoke_response(ongoing_attack)

				else:
					attack = XCSAttack(owner, ip, hostname, num_files)
					self._attacks[primary_key] = attack
					print "new attack!"
					self._invoke_response(attack)

		signal.alarm(self._alarm_interval)

class XCSMonitorException(Exception):
	pass
