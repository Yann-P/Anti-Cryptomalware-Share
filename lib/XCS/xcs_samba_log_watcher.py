#!/usr/bin/env python3.4
import signal
import subprocess
from threading import Thread
import sys
import os
import logging
from xcs_damage import XCSDamage, XCSDamageType

class XCSSambaLogWatcher(object):
	
	def __init__(self, parser_path, log_to_watch_path, files_to_ignore):
		# self._info_by_filename = {} # { path1 => [(user1, op1), ..., (usern, opn)] }
		self._users_to_damage = {} 	# { user => XCSDamage }
		self._watcher = subprocess.Popen([parser_path, log_to_watch_path], shell=False, stdout=subprocess.PIPE, preexec_fn=os.setsid)
		self._thread = Thread(target=self._watch)
		self._thread.start()
		self._basenames_to_ignore = files_to_ignore.split(' ')
		signal.signal(signal.SIGINT, self._interrupt_handler)

	def _watch(self):
		for line in iter(self._watcher.stdout.readline, b''):
			line = line.decode('utf-8')
			line = line.split()
			self._add(
				username=line[0], 
				damage_type=line[1], 
				path=' '.join(line[2:])
			) # the filename may contain spaces!

		logging.debug("XCSSambaLogWatcher: end of parser stream.")
	
	def _add(self, username, damage_type, path):

		if os.path.basename(path).lower() in self._basenames_to_ignore:
			return

		damage_type = XCSDamageType(damage_type)

		# if not path in self._info_by_filename:
		# 	self._info_by_filename[path] = []
		# self._info_by_filename[path].append((username, damage_type))
		
		if username in self._users_to_damage:
			existing_damage = self._users_to_damage[username]
			existing_damage += damage_type
		else:
			self._users_to_damage[username] = XCSDamage() + damage_type


	# def get_user_by_filename(self, path):
	# 	return self._info_by_filename[path][0]

	def get_report(self):
		return self._users_to_damage
		
	def clear(self, username):
		del self._users_to_damage[username]
		#for path, info in list(self._info_by_filename.items()):
		#	if info[0] == username:
		#		del self._info_by_filename[path]

	def _interrupt_handler(self, signum, frame):
		os.killpg(os.getpgid(self._watcher.pid), signal.SIGTERM)
		self._thread.join()

class XCSSambaLogWatcherException(Exception):
	pass
