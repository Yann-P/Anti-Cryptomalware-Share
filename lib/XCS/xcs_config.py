from configparser import ConfigParser, NoOptionError

class XCSConfig(ConfigParser):

	#   key :                   (section,   value    )
	KEYS = {
		'MONITOR_FREQUENCY': 	('monitor', 'frequency'),
		'SHARE_PATH': 		('monitor', 'share_git_dir'),
		'NOTIFY_INTERVAL': 	('notify', 'interval'),
		'NOTIFY_USERS': 	('notify', 'email_to'),
		'NOTIFY_DOMAIN': 	('notify', 'email_domain'),
		'SYSLOG_ENABLED':       ('log', 'enable_syslog_reporting'),
		'SAMBA_LOG_PATH': 	('global', 'samba_log'),
		'AUTO_ROLLBACK':	('global', 'auto_rollback')
	}

	def __init__(self, config_file, verbose=False):
		ConfigParser.__init__(self)
		self._verbose = verbose
		self.read(config_file)
		self._check()
		if self._verbose:
			print(self)

	# override
	def read(self, path):
		res = ConfigParser.read(self, path)
		if not len(res):
			raise XCSConfigError("Config file does not exist at location " + path)
		return res

	# override
	# get the config value for one of the keys defined in KEYS.
	def get(self, key):
		return ConfigParser.get(self, XCSConfig.KEYS[key][0], XCSConfig.KEYS[key][1])

	# check if all the keys are here
	# also check they are not null
	def _check(self):
		for key, value in XCSConfig.KEYS.items():
			try:
				if self.get(key) is None:
					raise XCSConfigError("Invalid value for key " + key)
			except NoOptionError as e:
				raise XCSConfigError("Missing key " + key + " : " + str(e))

	def __str__(self):
		res = "Dumping config:\n"
		for key, value in XCSConfig.KEYS.items():
			res += key + " = " + self.get(key) + '\n'
		res += "End of config.\n"
		return res


class XCSConfigError(Exception):
	pass
