from configparser import ConfigParser, NoOptionError

class XCSConfig(ConfigParser):

	#   key :                   (section,   value    )
	KEYS = {
		'MONITOR_FREQUENCY': 			('monitor', 'frequency', 'int'),
		'SHARE_PATH': 					('monitor', 'share_git_dir', 'string'),
		'SHARE_DATA_PATH':				('monitor', 'share_data_dir', 'string'),
		'NOTIFY_INTERVAL':				('notify', 'interval', 'int'),
		'NOTIFY_EMAIL_ENABLED':			('notify', 'email_enabled', 'boolean'),
		'NOTIFY_USERS':					('notify', 'email_to', 'string'),
		'NOTIFY_DOMAIN':				('notify', 'email_domain', 'string'),
		'NOTIFY_USER_EMAIL_BODY_FILE': 	('notify', 'user_email_body_file', 'string'),
		'NOTIFY_USER_EMAIL_SUBJECT': 	('notify', 'user_email_subject', 'string'),
		'SYSLOG_ENABLED': 				('log', 'enable_syslog_reporting', 'boolean'),
		'SAMBA_LOG_PATH': 				('global', 'samba_log', 'string'),
		'AUTO_ROLLBACK': 				('global', 'auto_rollback', 'boolean')
	}

	def __init__(self, prog_dir, config_file, verbose=False):
		ConfigParser.__init__(self)
		self._verbose = verbose
		self.prog_dir = prog_dir
		self.read(config_file)
		self._check()
		if self._verbose:
			print(self)

	# override
	def read(self, path):
		res = ConfigParser.read(self, path)
		if not len(res):
			raise XCSConfigError("Config file does not exist at location " + path)
		return res

	# override
	# get the config value for one of the keys defined in KEYS.
	def get(self, key):
		section = XCSConfig.KEYS[key][0]
		entry = XCSConfig.KEYS[key][1]
		var_type = XCSConfig.KEYS[key][2]

		getters = {
			'string': ConfigParser.get,
			'int': ConfigParser.getint,
			'float': ConfigParser.getfloat,
			'boolean': ConfigParser.getboolean
		}

		if not var_type in getters.keys():
			raise XCSConfigError("Variable type %s not supported. Use one of %s" % (var_type, str(getters.keys())))

		return getters[var_type](self, section, entry)

	# check if all the keys are here
	# also check they are not null
	def _check(self):
		for key, value in XCSConfig.KEYS.items():
			try:
				if self.get(key) is None:
					raise XCSConfigError("Invalid value for key " + key)
			except NoOptionError as e:
				raise XCSConfigError("Missing key %s : %s" % (key, str(e)))

	def __str__(self):
		res = "Dumping config:\n"
		for key, value in XCSConfig.KEYS.items():
			res += key + " = " + self.get(key) + '\n'
		res += "End of config.\n"
		return res


class XCSConfigError(Exception):
	pass
