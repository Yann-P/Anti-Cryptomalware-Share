import time
import datetime
from itertools import count
import copy
from enum import Enum

class XCSAttack():
	
	_ids = count(0)

	def __init__(self, username, ip, hostname, damage):
		self.datetime = datetime.datetime.now()
		self.id  				= "%s__%d" % (self.datetime.strftime('%Y-%m-%d_%H-%M-%S'), next(XCSAttack._ids))
		self.username 			= username
		self.ip 				= ip
		self.hostname 			= hostname
		self._damage 			= copy.copy(damage)
		self._last_notification_time 	= datetime.datetime.min
		self._last_damage_update_time	= datetime.datetime.now() # to keep track of the last change and be able to determine when the attack is over.

	def update_damage(self, damage):
		self._last_damage_update_time = datetime.datetime.now()
		self._damage = copy.copy(damage)

	def get_damage(self):
		return self._damage

	def seconds_since_last_damage_update(self):
		return (datetime.datetime.now() - self._last_damage_update_time).total_seconds()

	def seconds_since_last_notification(self):
		return (datetime.datetime.now() - self._last_notification_time).total_seconds()

	def reset_last_notification_time(self):
		self._last_notification_time = datetime.datetime.now()

	def __repr__(self):
		return "[XCSAttack id=%s]" % self.id

	def __str__(self):
		return "[XCSAttack id=%s at datetime=%s from username=%s ip=%s hostname=%s damage=%s]" % (self.id, self.datetime.strftime('%Y-%m-%d %H:%M:%S'), self.username, self.ip, self.hostname, self._damage)

class XCSAttackStatus(Enum):
	NEW = 'new'
	NOTHING_NEW = 'nothing new'
	UPDATED = 'updated damage'
	OVER = 'considered over'