from xcs_logger import XCSLogger, XCSLoggerException
from xcs_attack import XCSAttackStatus
import logging
import os
import time

class XCSFileLogger(XCSLogger):

    def __init__(self, config):
        XCSLogger.__init__(self, config)
        self._dir = os.path.join(config.prog_dir, '..', config.getval('FILE_LOGS_DIR')) # dir to write log files into.


    def log(self, attack, attack_status):

        logger = logging.getLogger('attack_%s' % attack.id)
        logger.setLevel(logging.INFO)
        if not logger.hasHandlers():
            fh = logging.FileHandler(os.path.join(self._dir, 'attack_%s.log' % attack.id))
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            fh.setFormatter(formatter)
            logger.addHandler(fh)

        if attack_status == XCSAttackStatus.NEW:
            logger.info("New attack %s" % str(attack))

        elif attack_status == XCSAttackStatus.UPDATED:
            logger.info("Update: new damage=%s" % str(attack.get_damage()))

        elif attack_status == XCSAttackStatus.OVER:
            logger.info("Attack is considered over.")

class XCSFileLoggerException(XCSLoggerException):
    pass