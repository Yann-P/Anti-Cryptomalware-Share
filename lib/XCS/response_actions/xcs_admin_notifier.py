# Copyright 2016 Technical University of Denmark
# Yann Pellegrini, Hugo Maxwell Connery
# Licensed under GPLv3

from response_actions.xcs_response_action import XCSResponseActionException
from response_actions.xcs_mail_notifier import XCSMailNotifier

from xcs_attack import XCSAttackStatus

class XCSAdminNotifier(XCSMailNotifier):
	def __init__(self, config):

		XCSMailNotifier.__init__(self, config)
		self._admin_emails = []

		for username in config.getval("NOTIFY_ADMIN_USERNAMES").split():
			if '@' in username:
				 self._admin_emails.append(username)
			else:
				self._admin_emails.append(username + "@" + config.getval("NOTIFY_DOMAIN"))


	def handle_attack(self, attack, can_notify):

		subject = "(%s, %s, %s)" % (attack.username, attack.ip, attack.hostname)

		if can_notify or attack.status is XCSAttackStatus.OVER: # always notify when over.

			if attack.status is XCSAttackStatus.NEW:
				subject = "new attack: " + subject
			
			elif attack.status is XCSAttackStatus.UPDATED:
				subject = "update: " + subject

			elif attack.status is XCSAttackStatus.OVER:
				subject = "attack considered over: " + subject

			for email_addr in self._admin_emails:
				message = str(attack)
				self._send_mail(email_addr, subject, message)
