# Copyright 2016 Technical University of Denmark
# Yann Pellegrini, Hugo Maxwell Connery
# Licensed under GPLv3

import logging
import os

from response_actions.xcs_response_action import XCSResponseAction, XCSResponseActionException
from xcs_attack import XCSAttackStatus
# Copyright 2016 Technical University of Denmark
# Yann Pellegrini, Hugo Maxwell Connery
# Licensed under GPLv3

class XCSFileLogger(XCSResponseAction):

	def __init__(self, config):
		self._dir = os.path.join(config.prog_dir, '..', config.getval('FILE_LOGS_DIR')) # dir to write log files into.

	def handle_attack(self, attack, can_notify):

		logger = logging.getLogger('attack_%s' % attack.id)
		logger.setLevel(logging.INFO)
		logger.handlers = []
		logger.propagate = False
		try:
			file_handler = logging.FileHandler(os.path.join(self._dir, 'attack_%s.log' % attack.id))
		except OSError as e:
			raise XCSResponseActionException("Failed to write log file (is this directory accessible: %s ?) : %s" % (os.path.realpath(self._dir), str(e)))

		formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # asctime is ISO8601

		file_handler.setFormatter(formatter)
		logger.addHandler(file_handler)

		if attack.status == XCSAttackStatus.NEW:
			logger.info("New attack %s" % str(attack))

		elif attack.status == XCSAttackStatus.UPDATED:
			logger.info("Update: new damage=%s" % str(attack.get_damage()))

		elif attack.status == XCSAttackStatus.OVER:
			logger.info("Attack is considered over.")

