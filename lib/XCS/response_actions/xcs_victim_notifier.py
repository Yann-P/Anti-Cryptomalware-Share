import os

from response_actions.xcs_response_action import XCSResponseActionException
from response_actions.xcs_mail_notifier import XCSMailNotifier

from xcs_attack import XCSAttackStatus

class XCSVictimNotifier(XCSMailNotifier):

	def __init__(self, config):
		XCSMailNotifier.__init__(self, config)
		self._subject = config.getval('NOTIFY_USER_EMAIL_SUBJECT')
		self._victim_mail_body_path = os.path.join(config.prog_dir, '..', config.getval('NOTIFY_USER_EMAIL_BODY_PATH'))
		self._victim_email_domain = config.getval("NOTIFY_DOMAIN")

	def handle_attack(self, attack, can_notify):

		if not can_notify: return

		victim_email_addr = attack.username + '@' + self._victim_email_domain

		if attack.status is XCSAttackStatus.UPDATED:
			self._subject = "[Update] " + self._subject
		elif attack.status is XCSAttackStatus.OVER:
			self._subject = "[Attack seems over] " + self._subject

		try:
			with open(self._victim_mail_body_path, 'r') as user_mail_file:
				message = user_mail_file.read() + "\n\nTechnical information: " + str(attack)
				self._send_mail(victim_email_addr, self._subject, message)

		except OSError as e:
			raise XCSResponseActionException('cannot send mail to victim: ' + str(e))
