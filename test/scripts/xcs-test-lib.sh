
#
# This is bash functions file to be 'source'd from a test script
#

ME=${ME:-xcs-test-lib}

user=xcs-test
password=xcs-test
share='//do-not-use.env.dtu.dk/xcs'
TMP=xcs-$(date +%s)-$$.tmp

function msg() { echo "$ME: $*" >&2; }
function err() { msg "Error: $*"; }
function info() { msg "Info: $*"; }

function connect()
{
	echo "$*" | smbclient $share $password -U $user
}

function test_connect()
{
	connect "exit"
}

function same_file()
{
	if [ $# -eq 2 -a -f $1 -a -f $2 ]
	then
		[ "$(sha1sum < $1)" = "$(sha1sum < $2)" ]
		retval=$?
	else
		err "Need 2 args and both must be local files; not met"
		retval=0
	fi
	return $retval
}

function new_file()
{
	newfile=new-file.$$.dat
	retval=1
	if dd if=/dev/zero of=$newfile bs=512 count=1
	then
		if connect "put $newfile"
		then
			connect "get $newfile $TMP"
			if same_file $newfile $TMP
			then
				retval=0
				info "Ok: put a temp file $TMP on the share.  (verified)"
			else
				err "get of putted file is different from the orig file.  weird"
			fi
		else
			err "Failed to put the new temp file to the share"
		fi
		[ -e $TMP ] && rm -f $TMP
	else
		err "Could not create temp file"
	fi
	rm -f $newfile
	return $retval
}

function overwrite_file()
{
	local src=$1
	local dst=$2
	retval=1
	if [ -e $dst ]
	then
		err "File '$dst' exists locally; thus, cannot verify; aborting"
	elif [ ! -f $src ]
	then
		err "Source '$src' does not exist locally"
	elif connect "get $dst " && [ -f $dst ]
	then
		if connect "put $src $dst"
		then
			if connect "get $dst" && same_file $src $dst
			then
				retval=0
				info "OK: verified $src has been put as $dst on share"
				# clean up the pulled file
				rm -f $dst
			else
				err "failed to get $dst and assert is was identical to $src"
			fi
		else
			err "Failed to put $src to share as $dst"
		fi
	else
		err "could not connect to fetch '$dst'"
	fi
	return $retval
}

function delete_file()
{
	local rmfile=$1
	retval=1
	if [ -z "$rmfile" ]
	then
		err "No file name supplied"
	elif connect "get $rmfile "
	then
			# cleanup the pulled file
			rm -f $rmfile 
			if connect "rm $rmfile"
			then
				if connect "get $rmfile"
				then
					if [ ! -f "$rmfile" ]
					then
						info "OK: verified $rmfile was removed from share"
						retval=0
					else
						err "failed to delete $rmfile from share"
					fi
				else
					err "failed to connect to share to get the deleted file"
					err "this should fail in the get but not the connect"
				fi
			else
				err "unexpected error; could not remove $rmfile; perms ??"
			fi
	else
		err "could not connect to share"
	fi
	return $retval
}
