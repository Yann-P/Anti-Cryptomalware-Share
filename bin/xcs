#!/usr/bin/env python

import sys
import os
import signal
import time

# General: prog name, lib dir, default config etc.
prog_name       = os.path.basename(sys.argv[0])
prog_dir		= os.path.dirname(sys.argv[0])
config_path		= os.path.join(prog_dir, '..', 'etc', 'xcs.conf')
lib_dir			= os.path.join(prog_dir, '..', 'lib', 'XCS')
sys.path.append(lib_dir)
sys.path.append(os.path.join(lib_dir, 'logger')) # logger modules
sys.path.append(os.path.join(lib_dir, 'notifier')) # notifier modules
sys.path.append(os.path.join(lib_dir, 'helpers')) # helper modules

from xcs_argparser 	import XCSArgParser, XCSArgumentError
from xcs_config 	import XCSConfig, XCSConfigError
from xcs_msg 		import XCSMsg
from xcs_monitor 	import XCSMonitor, XCSMonitorException
from xcs_mail_helper import XCSMailHelper
import xcs_share_helper

def cmdline():
    PROG_DESC		= "Anti-CryptoMalware-Share (xcs): a defence against crytpo-malware"
    PROG_EPILOG		= "Maintainer: Hugo Maxwell Connery <hmco@env.dtu.dk>"
    PROG_LICENSE	= "GPLv3"

    msg				= XCSMsg(prog_name)
    args_parser		= XCSArgParser(prog_name, PROG_DESC, PROG_EPILOG, config_path)

    try:
        args 	= args_parser.parse_args()
        config 	= XCSConfig(args.config_file, args.verbose)
    except XCSArgumentError as e:
        msg.err("Argument error : " + str(e))
        args_parser.print_help()
        return 1
    except XCSConfigError, e:
        msg.err("Config error : " + str(e))
        return 1

    msg.set_verbosity(args.verbose)
    XCSMailHelper.configure(hostname="smtp.env.dtu.dk", sender_address="xcs@do-not-touch.env.dtu.dk", port=25)

    if args.action == 'monitor':
        xcs = XCSMonitor(msg, args, config)
    elif args.action == 'rollback':
        return xcs_share_helper.rollback(config.get('SHARE_PATH'))
    else:
        msg.err('Not implemented')

    return 0

def main():
    sys.exit(cmdline())

if __name__ == '__main__':
    main()
