#!/usr/bin/env python

import sys
import os
import signal
import time

# General: prog name, lib dir, default config etc.
prog_name 		= os.path.basename(sys.argv[0])
prog_dir 		= os.path.dirname(sys.argv[0])
config_path 	= os.path.join(prog_dir, '..', 'etc', 'xcs.conf')
lib_dir 		= os.path.join(prog_dir, '..', 'lib', 'XCS')
sys.path.append(lib_dir)

from xcs_argparser 	import XCSArgParser, XCSArgumentError
from xcs_config 	import XCSConfig, XCSConfigError
from xcs_msg 		import XCSMsg
import xcs_share_tools

class XCSDaemon:

	def __init__(self, msg, args, config):
		self.msg = msg
		self._alarm_interval = int(config.get('MONITOR_FREQUENCY'))

		self._setup_alarm()
		while True:
			time.sleep(10)

	def _setup_alarm(self):
		signal.signal(signal.SIGALRM, self._alarm_handler)
		signal.alarm(self._alarm_interval)

	def _alarm_handler(self, signum, frame):
		print 'alarm!'
		signal.alarm(self._alarm_interval)


def cmdline():
	PROG_DESC 		= "Anti-CryptoMalware-Share (xcs): a defence against crytpo-malware"
	PROG_EPILOG 	= "Maintainer: <hmco@env.dtu.dk>"
	PROG_LICENSE 	= "GPLv3"

	msg 			= XCSMsg(prog_name)
	args_parser 	= XCSArgParser(prog_name, PROG_DESC, PROG_EPILOG, config_path)

	try:
		args 	= args_parser.parse_args()
		config 	= XCSConfig(args.config_file, args.verbose)
	except XCSArgumentError as e:
		msg.err("Argument error : " + str(e))
		args_parser.print_help()
		return 1
	except XCSConfigError, e:
		msg.err("Config error : " + str(e))
		return 1

	msg.set_verbosity(args.verbose)

	if args.action == 'monitor':
		xcs = XCSDaemon(msg, args, config)
	elif args.action == 'rollback':
		xcs_share_tools.rollback(config.get('SHARE_PATH'))
	else:
		msg.err('Not implemented')

	return 0

def main():
	sys.exit(cmdline())

if __name__ == '__main__':
	main()
