#!/usr/bin/env python

import ConfigParser, sys, os, argparse

# General: prog name, lib dir, default config etc.
prog_name = os.path.basename(sys.argv[0])
prog_dir = os.path.dirname(sys.argv[0])
default_config = os.path.join(prog_dir, '..', 'etc', 'xcs.conf')
lib_dir = os.path.join(prog_dir, '..', 'lib')
sys.path.append(lib_dir)

# Get out library
import XCS

#
# Parse command-line args.
#
def cmdline(xcs, msg):
	prog_desc = """
	Anti-CryptoMalware-Share (xcs): a defence against crytpo-malware
	"""
	prog_epilog = "Monitor and analyse 'attacks' (modifications) of the share"
	arg_parser = argparse.ArgumentParser(prog=prog_name, 
		description=prog_desc,epilog=prog_epilog)

	arg_parser.add_argument('action', 
		help='The action to take: ' + str(xcs.get_actions()))
	arg_parser.add_argument('-v', '--verbose', action="store_true",
		default=False, 
		help="Debug mode")
	arg_parser.add_argument('-c', '--config-file', nargs="?",
		default=default_config,
		help="config file")

	args = arg_parser.parse_args()
	# verify args
	msg.set_verbosity(args.verbose)
	msg.info('Args are: ' + str(args))
	if xcs.check_action(args.action):
		msg.info('Args okay')
	else:
		msg.err('Invalid action' + "'" + args.action + "'")
		arg_parser.print_help()
		sys.exit(1)
	return args

def main():
	exit_status = 1
	# Global Messaging object
	msg = XCS.Msg(prog_name)
	xcs = XCS.XCS(msg)
	args = cmdline(xcs, msg)
	xcs.load_config(args.config_file, args.verbose)
	return exit_status

exit(main())
