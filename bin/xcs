#!/usr/bin/env python3.4

import sys
import os
import signal
import time

# General: prog name, lib dir, default config etc.
prog_name       	= os.path.basename(sys.argv[0])
prog_dir		= os.path.abspath(os.path.dirname(sys.argv[0]))
config_path		= os.path.join(prog_dir, '..', 'etc', 'xcs.conf')
lib_dir			= os.path.join(prog_dir, '..', 'lib', 'XCS')
samba_log_parser_path 	= os.path.abspath(os.path.join(prog_dir, 'samba-log-filter.sh'))

sys.path.append(lib_dir)
sys.path.append(os.path.join(lib_dir, 'loggers')) # logger modules
sys.path.append(os.path.join(lib_dir, 'notifiers')) # notifiers modules
sys.path.append(os.path.join(lib_dir, 'helpers')) # helper modules

from xcs_argparser 	import XCSArgParser, XCSArgumentError
from xcs_config 	import XCSConfig, XCSConfigError
from xcs_msg 		import XCSMsg
from xcs_monitor 	import XCSMonitor, XCSMonitorException
import xcs_share_helper
#import xcs_random_data_generator

def cmdline():
	PROG_DESC		= "Anti-CryptoMalware-Share (xcs): a defence against crytpo-malware"
	PROG_EPILOG		= "Maintainer: Hugo Maxwell Connery <hmco@env.dtu.dk>"
	PROG_LICENSE		= "GPLv3"

	msg			= XCSMsg(prog_name)
	args_parser		= XCSArgParser(prog_name, PROG_DESC, PROG_EPILOG, config_path)

	try:
		args 	= args_parser.parse_args()
		config 	= XCSConfig(prog_dir, args.config_file, args.verbose)
	except XCSArgumentError as e:
		msg.err("Argument error : " + str(e))
		args_parser.print_help()
		return 1
	except XCSConfigError as e:
		msg.err("Config error : " + str(e))
		return 1

	msg.set_verbosity(args.verbose)

	if args.action == 'monitor':
		try:
			xcs = XCSMonitor(msg, args, config, samba_log_parser_path)
		except XCSMonitorException as e:
			msg.err("Monitor error : " + str(e))
	elif args.action == 'rollback':
		return xcs_share_helper.rollback(config.getval('SHARE_PATH'))

	elif args.action == 'debug': # debug stuff there.
		pass
		#for i in range(1, 100000):
			#xcs_random_data_gen.create_random_file(config.getval('SHARE_DATA_PATH'), "helloworld%d.txt" % i, 1)
	else:
		raise XCSArgumentError("Not implemented")

	return 0

def main():
	sys.exit(cmdline())

if __name__ == '__main__':
	main()
