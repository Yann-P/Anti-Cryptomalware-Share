#!/usr/bin/env python

import ConfigParser, sys, os, argparse

global_section = 'global'
install_base = 'install_base'

# Command-line parsing info
prog_name = os.path.basename(sys.argv[0])
prog_dir = os.path.dirname(sys.argv[0])
default_config = os.path.join(prog_dir, '..', 'etc', 'xcs.conf')

prog_desc = """
Anti-CryptoMalware-Share (xcs)
"""
prog_epilog = "Monitor and analyse 'attacks' (modifications) of the share"


#
# Parse command-line args or deliver help, return the args if ok
#
def cmdline():
	arg_parser = argparse.ArgumentParser(prog=prog_name, description=prog_desc,epilog=prog_epilog)

	arg_parser.add_argument('action', metavar='ACTION', 
			help='The action to take: monitor, report, ...')

	arg_parser.add_argument('-c', '--config-file', nargs="?",
		default=default_config,
		help="config file")

	return arg_parser.parse_args()

def dump_config(cfg_file):
	cfg = ConfigParser.ConfigParser()
	cfg.read(cfg_file)

	base = cfg.get(global_section, install_base)

	for section in cfg.sections():
		print
		print '[' + section + ']'
		for (key, val) in cfg.items(section):
			print key + ' = ' + cfg.get(section, key, 0, {install_base: base})

def main():
	# assume failure :)
	exit_status = 1
	args = cmdline()
	print args
	dump_config(args.config_file)
	# verify args
	return exit_status


exit(main())
