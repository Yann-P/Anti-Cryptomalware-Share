#!/usr/bin/env python3.4

# Copyright 2016 Technical University of Denmark
# Yann Pellegrini, Hugo Maxwell Connery
# Licensed under GPLv3

# Anti-Cryptomalware Share (xcs): a honeypot for cryptomalware
# to provide rapid notification when files in a Samba share are
# modified, deleted or created.  See the doc/ directory for
# more information.


import sys
import os
import signal
import time
import logging

# General: prog name, lib dir, default config etc.


prog_name       	= os.path.basename(sys.argv[0])
prog_dir		= os.path.abspath(os.path.dirname(sys.argv[0]))
config_path		= os.path.join(prog_dir, '..', 'etc', 'xcs.conf')
lib_dir			= os.path.join(prog_dir, '..', 'lib', 'XCS')

sys.path.append(lib_dir)
sys.path.append(os.path.join(lib_dir, 'response_actions')) # action modules
sys.path.append(os.path.join(lib_dir, 'helpers')) # helper modules

from xcs_argparser 	import XCSArgParser, XCSArgumentError
from xcs_config 	import XCSConfig, XCSConfigError
from xcs_monitor 	import XCSMonitor, XCSMonitorException
import xcs_share_helper

def cmdline():
	PROG_DESC		= "Anti-CryptoMalware-Share (xcs): a defence against crypto-malware"
	PROG_EPILOG		= "Maintainer: Hugo Maxwell Connery <hmco@env.dtu.dk>"
	PROG_LICENSE	= "GPLv3"


	args_parser	= XCSArgParser(prog_name, PROG_DESC, PROG_EPILOG, config_path)

	try:
		args 	= args_parser.parse_args()
		logging.basicConfig(format='%(levelname)s:%(message)s',
							level=logging.DEBUG if args.verbose else logging.WARNING)
		config 	= XCSConfig(prog_dir, args.config_file, args.verbose)
	except XCSArgumentError as e:
		logging.error("Argument error : " + str(e))
		args_parser.print_help()
		return 1
	except XCSConfigError as e:
		logging.error("Config error : " + str(e))
		return 1


	if args.action == 'monitor':
		try:
			xcs = XCSMonitor(args, config)
		except XCSMonitorException as e:
			logging.error("Monitor startup error : " + str(e))
	elif args.action == 'rollback':
		return xcs_share_helper.rollback(config.getval('SHARE_PATH'))
	else:
		raise XCSArgumentError("Not implemented")

	return 0

def main():
	sys.exit(cmdline())

if __name__ == '__main__':
	main()
