#!/bin/bash

# Monitor the Samba Log looking for file modification or deletion
#
# When found output a space separated list of the username, and
# modifiy or delete flag and the file path:
#
# <username> <m|d> <file path>
#
# NOTE: Samba should use just one log file and it needs log level 2
# E.g
# [global]
#    log file = /var/log/samba/smb.log
#    log level = 2

ME=$(basename $0)

log=/var/log/samba/smb.log
function usage()
{
	echo "Usage: $ME [/path/to/samba/log]

log defaults to $log
" >&2
}

if [ -n "$1" ]
then
	case $1 in
	'-h'|'--help')
		usage ; exit 0
		;;
	'*')
		log=$1
		if [ ! -r $log ]
		then
			err "Cannot read log '$log'"
			usage
			exit 1
		fi
		;;
	esac
fi

# parse the log
tail -f $log | \
grep --line-buffered ' opened file ' | \
#awk '{ printf "%s %s %s %s\n", $1, $4, $5, $6; }' | \
#while read username filepath readflag writeflag rest
while read line
do
	read username a b filepath readflag writeflag rest <<< "$line"
	
	if [ $readflag = "read=Yes" ] && [ $writeflag = "write=Yes" ]; then
	      echo "$username m $filepath"
	fi

	if [ $readflag = "read=No" ] && [ $writeflag = "write=No" ]; then
	      echo "$username d $filepath"
	fi

	if [ $readflag = "read=No" ] && [ $writeflag = "write=Yes" ]; then
	      echo "$username c $filepath"
	fi

	#case "$readflag" in
	#'read=Yes')
#		case "$writeflag" in
#		'write=Yes')
#			echo "$username m $filepath"
#			;;
#		'write=No')
#			# This is a file read operation; we dont care
#			:
#			;;
#		*)
#			:#logger -p user.err "$ME: Parsing error"
#			;;
#		esac
#		;;
#	'read=No')
#		case "$writeflag" in
#		'write=No')
#			echo "$username d $filepath"
#			;;
#		'write=Yes')
#			# This is an unknown operation ?
#			:
#			;;
#		*)
#			:#logger -p user.err "$ME: Parsing error"
#			;;
#		esac
#		;;
#	esac
	
done

exit 0

#
# Examples seen in Samba log which we are trying to parse
# create file: 
## xcs-test opened file foo.dat read=Yes write=Yes (numopen=1)
## xcs-test closed file foo.dat (numopen=0) NT_STATUS_OK
# here foo.dat did not exist on the share
# 
# overwrite file:
## xcs-test opened file e.dat read=Yes write=Yes (numopen=1)
## xcs-test closed file e.dat (numopen=0) NT_STATUS_OK
#
# --> Cannot distinguish between create and modify
#
# delete file:
## xcs-test opened file e.dat read=No write=No (numopen=1)
## xcs-test closed file e.dat (numopen=0) NT_STATUS_OK
#
# read file (no change):
## xcs-test opened file b.dat read=Yes write=No (numopen=1)
## xcs-test closed file b.dat (numopen=0) NT_STATUS_OK
# second example with path
## xcs-test opened file i/a.dat read=Yes write=No (numopen=1)
## xcs-test closed file i/a.dat (numopen=0) NT_STATUS_OK

