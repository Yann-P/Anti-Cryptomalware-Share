#!/bin/bash

# Monitor the Samba Log looking for file modification or deletion
#
# When found output a space separated list of the username, and
# modifiy or delete flag and the file path:
#
# <username> <m|d> <file path>
#
# NOTE: Samba should use just one log file and it needs log level 2
# E.g
# [global]
#    log file = /var/log/samba/smb.log
#    log level = 2

ME=$(basename $0)

if [ -z "$1" -o ! -r "$1" ]
then
	echo "$ME: argument error, need a log file to read" >&2
	exit 1
else
	log=$1
fi

tail -f $log | grep ' opened file ' | awk '{ print $1 $4 $5 $6; }' | \
while read user filepath readflag writeflag rest
do
	if [ 'read=Yes' = $readflag ]
	then
		if [ 'write=Yes' = $writeflag ]
		then
			echo "$user m $file"
		else
			# This is a file read operation; we dont care
			:
		fi
	elif [ 'read=No' = $readflag ]
	then
		if [ 'write=No' = $writeflag ]
		then
			echo "$user d $file"
		else
			# This is an unknown operation ?
			:
		fi
	else
		# Panic
		logger -p user.err "$ME: Parsing error"
	fi
done

#
# Examples seen in Samba log which we are trying to parse
# create file: 
## xcs-test opened file foo.dat read=Yes write=Yes (numopen=1)
## xcs-test closed file foo.dat (numopen=0) NT_STATUS_OK
# here foo.dat did not exist on the share
# 
# overwrite file:
## xcs-test opened file e.dat read=Yes write=Yes (numopen=1)
## xcs-test closed file e.dat (numopen=0) NT_STATUS_OK
#
# --> Cannot distinguish between create and modify
#
# delete file:
## xcs-test opened file e.dat read=No write=No (numopen=1)
## xcs-test closed file e.dat (numopen=0) NT_STATUS_OK
#
# read file (no change):
## xcs-test opened file b.dat read=Yes write=No (numopen=1)
## xcs-test closed file b.dat (numopen=0) NT_STATUS_OK
# second example with path
## xcs-test opened file i/a.dat read=Yes write=No (numopen=1)
## xcs-test closed file i/a.dat (numopen=0) NT_STATUS_OK

