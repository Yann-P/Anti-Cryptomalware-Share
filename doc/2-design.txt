
Create a share which is writable and auto-mounted for 
all employees.  The share should have unimportant data
(e.g rubbish) and a big warning at the top telling people
to NEVER USE it (it is a trap for crypto-malware) and
using it implies that you have an infection.

The contents of the share are known to a monitoring system
which watches it and finds changes (new files, or updated
files).  When changes are detected by the monitor, actions
can be taken.  The key action is to notify about the change.
The key data is the username and the hostname of the attacking
user/computer.  Additional details, e.g IP address are desirable.

The monitor shall be able to "roll back" the changes.  This
will be done by the share actually being a git repository :)

Changes are detectable by doing a "git status --porcelain".  From this
one can identify the files that are changed, and from those,
the owner of the file identifies the user.  From that, one
can use smbstatus -u <user> to obtain connection information
(IP address) and from the nmblookup -A <ip> gives the hostname.

Thus:

git status --porcelain --> list of files --> owners of files 
smbstatus -u <user> -b -n --> connection details (ip address)
# -b (brief) and -n (numeric) makes it easier to parse
nmblookup -A 192.38.76.164 | grep '[<]00[>]'
# <00> provides the domain (workgroup) in GROUP and the hostname


To throw away all changes (rollback):

git checkout -f HEAD

Components
----------

The share is a sub-dir of a git repository, which also
contains the tools.  The tools are the monitor script,
which just checks if anything has changed (git status -s
gives some output), and those that respond to the detection
of changes.

If things have changed, the "action" part takes over.
It always creates a list of files (which have changed
or been created) and their corresponding owners.  This
is the "report" tool.  In the share's unmodified state,
all files are owned by 'nobody'.  The report tool ignores
all files owned by nobody or root.

The report is made available to the 'notification' tool.
It then gathers data (as outlined above) about the hostname
and IP address of the attacking system associated with the
user and sends email.

If so desired, the "action" tool can then request a rollback
to the previous version of the share, thus discarding all
changes and new files (and re-creating any that were deleted).

What "action" does is to be controlled by a policy (configuration).

The default would be just to create the report and send email
(to the user and a collection of other addresses).

Other potential actions:

* rollback
* disable the computer account (how?)
* disable the user account (how?)
* terminate VPN access for the account (how?)
* shutdown the computer  (how?)
* instruct the LAN to stop talking to the computer (how?)


Thus we have:

* a config file used by "action"
* a simple monitor script
* the "report" generator
* the "notification" tool
* the "rollback" tool
* potentially other "action" tools: notify the anti-virus
  system on the real shares and tell it to ban the IP address
  for a week.


Configuration
-------------

[notification]
# Email addresses are <user>@<domain>
domain = env.dtu.dk
mail = %u hmco mapp rele stkp

[report]
# Where to write reports
report_file_base = /var/www/html/crypto-attack.env.dtu.dk/reports
report_url_base = https://crypto-attack.env.dtu.dk/reports
# report filename is <date_time>-<user>-<hostname>
# it lists the output of git status --porcelain, smbstatus -u <user>
# and nmblookup -A <ip>

[action]
# what actions to take?
perform = report notify rollback


Slowing the Attack
------------------

The target share should have at least 100 GB of data (possibly
0.5 TB) for attack.  The data should be random binary data with
interesting filename extensions (docx, pptx, xlsx, pdf, jpg, tiff, ...).

Perhaps the data should be actual files of that type, rather
than random, so as to encourage attack.  E.g download lots of
documents from the gutenberg project and host them; real 
data of no value.

The hope is that by detection and then rollback the malware is 
trapped into re-encrypting files.

Another alternative is files of zeros.  A potentially even better
solution is a /dev/zero or /dev/random device file on the share which just
eternally provides data, with no end of file.  These could be littered
throughout the share.  The problem here is change detection.  These
files will never change (device drivers).  Thus, we need a 
detection for the samba client process accessing them, and 
then identification of the connecting user/computer.b

Another option: can XCS dynamically reduce the network bandwidth
via Samba of the attacking system.  Thus, they are slower in 
gaining the data (and thus encrypting it) and slower in depositing
the encrypted version.  This would have the reverse desired
effect for an attacker that is monitoring the network bandwidth
(i.e they just abort and attack the real things).

Network slowdown, if possible, should be a policy choice.

