
Code Review

By: Hugo Connery
Date: 2016-07-28

Scope:

Review of the code against the class diagram and explanation.
The design may need update, but that is my job.  The design
will be updated against the code based on the review.

Diagram

Looks good

All files:

 need copyright statement:

	Copyright 2016 Technical University of Denmark

 the code style seems consistent, which is great, with some exceptions:
	
	keep to 80 columns or use long lines
	'num' vs 'nb'


bin/
xcs

  Needs some introductor commentary.  E.g

    Anti-Cryptomalware Share (xcs): a honeypot for cryptomalware
    to provide rapid notification when files in a Samba share are
    modified, deleted or created.  See the doc/ directory for 
    more information.

  PROG_DESC has a spelling error in the text

lib/XCS/helpers/
__init__.py

  why an empty file?

xcs_share_helper.py

 Nice use of shell on-liners for the key processes of obtaining
user IP addresses and hostname.

 The constant use of subprocess.check_output(...).decode('utf-8') 
screams for a wrapper.

lib/XCS/

xcs_argparser.py

  "debug" is not an action.  Monitor is the action, debug should be
  a flag (e.g -d).  What is the difference between debug and verbose ?

  Inconsistency with helpers/xcs_share_helper.  Either be consistent
  about keeping the code within 80 columns, or use long lines.

xcs_config.py

  read() returns a value that is not used.

  getval()  getters implements 'float' which is not used

  _check() is wrong.  You are confusing invalid type with missing key.
  My version of check (for a config) does the whole thing; i.e 
  check that the git path is a git repository, that the share path
  is a directory, that the monitor interval is a positive integer etc.
  You seem to be checking for "all keys have a value of the correct type".
  Thats okay, but when you have seems a bit confused.

xcs_damage.py

  __add__(): I dont get what you are doing in the elif.

xcs_attack.py

  strftime('%Y-%m-%d_%H:%M:%S')  ie. use : between H:M:S

xcs_samba_log_watcher.py

  __init__()  I would prefer that the three _thread statements come
  last.  It seems straing calling self._thread.start() and then
  making two other assignments.

  _watch()  you can doing the open call and not checking for error.
  Should this not be done in the __init__?

xcs_monitor.py

  nice check for root geteuid() xD

  _enforce_clean_git_repository()  perhaps add a comment, "we demand
  a clean git repository".

  # Kernel signals: nice

  code order is confused.  Need a comment at the top about using async
  signals (to remind the reader).  The function order declaration should
  be: __init__ _check_share with a comment at the top of _check_share 
  which says "called by the alarm handler" or similar.

  In general this whole thing needs work.  This is the core of the 
  program; it needs clarity, including commentary.  I will review 
  this file again when it is improved.

  On the positive side, the _invoke_response() thing is nice and 
  clean.  Good work.

response_actions:

xcs_file_logger.py

  Add a comment above logging.Formatter(...) of "use ISO8601 for datetime format"

  __init__()  We need to discuss the ../FILE_LOGS_DIR thing.  I think
  this should be supplied in the config and be an absolute path.
  e.g /var/log/xcs

xcs mail/victim/admin notifier

  As mentioned, I think that the admin emails should be fully specified
  but the user (victim) address is derived from the user name and 
  "notify_domain".

  Apart from that, clean enough.
